# generated by datamodel-codegen:
#   filename:  opening_hours_schema_template.json
#   timestamp: 2025-06-13T14:53:54+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Dict, List, Optional, Union

from pydantic import BaseModel, Field, constr


class Metadata(BaseModel):
    class Config:
        extra = "forbid"

    identifiant: str = Field(..., description="Identifiant unique du lieu")
    nom: str = Field(..., description="Nom de l'établissement")
    type_lieu: str = Field(
        ..., description="Type de lieu (Mairie, École, Piscine, Médiathèque, etc.)"
    )
    url: str = Field(..., description="URL de la page analysée")
    timezone: Optional[str] = Field("Europe/Paris", description="Fuseau horaire")


class Mode(Enum):
    ferme = "ferme"
    ouvert = "ouvert"
    reduit = "reduit"


class ExtractionInfo(BaseModel):
    class Config:
        extra = "forbid"

    source_found: bool = Field(
        ..., description="Indique si des horaires ont été trouvés dans le contenu"
    )
    confidence: Optional[float] = Field(
        None, ge=0.0, le=1.0, description="Niveau de confiance de l'extraction (0-1)"
    )
    notes: Optional[str] = Field(
        None, description="Notes sur l'extraction ou particularités"
    )


# Define a type alias for the constrained string pattern
HeureStr = Annotated[str, constr(pattern=r"^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$")]


class CreneauHoraire(BaseModel):
    class Config:
        extra = "forbid"

    debut: HeureStr = Field(..., description="Heure de début au format HH:MM")
    fin: HeureStr = Field(..., description="Heure de fin au format HH:MM")


class HorairesJour(BaseModel):
    class Config:
        extra = "forbid"

    source_found: bool = Field(..., description="Indique si ce jour est pris en compte")
    ouvert: bool = Field(..., description="Indique si le lieu est ouvert ce jour")
    creneaux: List[CreneauHoraire] = Field(
        ..., description="Liste des créneaux d'ouverture"
    )


class HorairesHebdomadaires(BaseModel):
    class Config:
        extra = "forbid"

    lundi: Optional[HorairesJour] = None
    mardi: Optional[HorairesJour] = None
    mercredi: Optional[HorairesJour] = None
    jeudi: Optional[HorairesJour] = None
    vendredi: Optional[HorairesJour] = None
    samedi: Optional[HorairesJour] = None
    dimanche: Optional[HorairesJour] = None


class HorsVacancesScolaires(BaseModel):
    class Config:
        extra = "forbid"

    source_found: bool
    label: Optional[str] = "Période hors vacances scolaires"
    condition: Optional[str] = "default"
    horaires: HorairesHebdomadaires


class VacancesScolairesEte(BaseModel):
    class Config:
        extra = "forbid"

    source_found: Optional[bool] = False
    label: Optional[str] = "Grandes vacances scolaires"
    condition: Optional[str] = "SH"
    horaires: Optional[HorairesHebdomadaires] = None


class PetitesVacancesScolaires(BaseModel):
    class Config:
        extra = "forbid"

    source_found: Optional[bool] = False
    label: Optional[str] = "Petites vacances scolaires"
    condition: Optional[str] = "SH"
    horaires: Optional[HorairesHebdomadaires] = None
    description: Optional[str] = None


class JoursFeries(BaseModel):
    class Config:
        extra = "forbid"

    source_found: Optional[bool] = False
    label: Optional[str] = "Jours fériés"
    condition: Optional[str] = "PH"
    mode: Optional[Mode] = "ferme"
    horaires_specifiques: Optional[Dict[str, Union[str, HorairesJour]]] = None
    description: Optional[str] = None


class JoursSpeciaux(BaseModel):
    class Config:
        extra = "forbid"

    source_found: Optional[bool] = False
    label: Optional[str] = "Jours spéciaux"
    mode: Optional[Mode] = "ferme"
    horaires_specifiques: Optional[Dict[str, Union[str, HorairesJour]]] = None
    description: Optional[str] = None


class Periodes(BaseModel):
    class Config:
        extra = "forbid"

    hors_vacances_scolaires: HorsVacancesScolaires = Field(
        ..., description="Horaires normaux hors vacances scolaires"
    )
    vacances_scolaires_ete: Optional[VacancesScolairesEte] = Field(
        None, description="Horaires pour les grandes vacances scolaires, durant l'été"
    )
    petites_vacances_scolaires: Optional[PetitesVacancesScolaires] = Field(
        None, description="Horaires pour les petites vacances scolaires, hors été"
    )
    jours_feries: Optional[JoursFeries] = Field(
        None, description="Gestion des jours fériés"
    )
    jours_speciaux: Optional[JoursSpeciaux] = Field(
        None, description="Gestion des jours spéciaux avec horaires aménagés"
    )


class HorairesOuverture(BaseModel):
    class Config:
        extra = "forbid"

    metadata: Metadata = Field(..., description="Métadonnées du lieu")
    periodes: Periodes = Field(..., description="Différentes périodes d'horaires")
    extraction_info: ExtractionInfo = Field(
        ..., description="Informations sur l'extraction"
    )


class Horaires(BaseModel):
    horaires_ouverture: HorairesOuverture = Field(
        ..., description="Structure complète des horaires d'ouverture d'un lieu"
    )
